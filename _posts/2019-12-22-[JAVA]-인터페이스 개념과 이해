
개념
Interface 란?

상수형 필드와 추상 메소드만 작성할 수 있으며, 추상 클래스의 변형체이다.
해당 인터페이스를 사용한다면, 그 인터페이스 내에 정의된 모든 추상 메소드를 구현해야한다. 



    [접근제한자] interface InterFaceName{
      public static final String str = 초기값;
    
      [public abstract] void testMethod();
    
    }
    
    public class TestClass implement InterFaceName{
      public void testMethod(){
        
      }
    }

1 line : class가 아닌 interface로 만든다.

4 line : 추상메소드(본체가 없는 메소드)만 선언 가능하며, public abstract가 생략되기 때문에 오버라이딩시 반드시 public 표기를 해야한다

 8 line : 사용할 interface를 implement 키워드로 구현 한다.
 
 9 line : interface 내의 정의된 추상 메소드를 구현한다.


interface의 장점
- 상위 타입의 역할로 다형성을 지원하여 연결해주는 역할 수행
- 해당 객체가 다양한 기능을 제공시에도 인터페이스에 해당하는 기능만을 사용하게 제한할 수 있음
- 공통 기능상의 일관성 제공( 공동 작업을 위한 인터페이스 제공)
- 다중상속을 지원하여 단일 상속의 제한점을 극복


이해
- 기능 추상화를 통해 인터페이스에 추상메소드들을 정의하고, 해당 인터페이스를 구현할때 반드시 메소드를 구현하도록 강제 함으로써, 일관성을 제공한다.


- 인터페이스를 구현하여 해당 인터페이스의 Type으로 객체를 생성함으로 다형성을 가질 수 있다.

